#!/usr/bin/env groovy
@Grab('se.alipsa.uso:uso-core:0.0.5')
@Grab('org.slf4j:slf4j-simple:2.0.17')
@GrabConfig(systemClassLoader=true)
import org.apache.tools.ant.BuildException
import org.codehaus.groovy.control.CompilationFailedException
import se.alipsa.uso.core.ErrorReportingListener
import se.alipsa.uso.core.ProjectBuilder
import se.alipsa.uso.tasks.Layout

ProjectBuilder projectBuilder = new ProjectBuilder()
def binding = new Binding()
binding.setVariable("project", projectBuilder)
def shell = new GroovyShell(binding)


def parseArgs() {
  File buildFile
  List<String> targets = []
  List<String> props = []
  if (args.length < 1) {
    buildFile = new File("build.groovy")
  } else {
    buildFile = new File(args[0])
    if (!buildFile.exists()) {
      buildFile = new File("build.groovy")
    }
  }

  args.each {
    if (it != buildFile.name && !it.startsWith('-D')) {
      targets << it
    }
    if (it.startsWith('-D')) {
      props << it.substring(2)
    }
  }
  [
      buildFile: buildFile,
      targets: targets,
      systemProperties: props
  ]
}

def params = parseArgs()
params.systemProperties.each {
  def keyVal = it.split('=')
  System.setProperty(keyVal[0], keyVal[1])
}

if (params.targets.contains('-layout')) {
  // uso -layout maven groovy
  def type = params.targets[1]
  def language = params.targets[2]
  Layout layout = new Layout(type: type, language: language)
  layout.setProject(projectBuilder.antProject)
  layout.execute()
  return
} else if (params.targets.contains('--layout')) {
  // uso --layout type=maven language=groovy
  def type = params.targets[1].substring('type='.length())
  def language = params.targets[2].substring('language='.length())
  Layout layout = new Layout(type: type, language: language)
  layout.setProject(projectBuilder.antProject)
  layout.execute()
  return
}
if (params.targets.contains('-p') || params.targets.contains('--projecthelp')) {
  println projectBuilder.targets.keySet()
  return
}
if (params.targets.contains('-h') || params.targets.contains('--help')) {
  println "usage: uso [target1] [target2]"
  println "other parameters can be: "
  println "buildFile - to specify another name than build.groovy"
  println "-D[systemproperty=value] - to define a system property"
  println "the order is 'uso [buildFile] [targets separated by space] [system properties]"
  println "Other (terminating) commands are:"
  println "--projecthelp  - to get a list of available targets"
  println "--layout [type] [language] - to create a dir structure suitable for your project"
  return
}

if (projectBuilder.groupId == null) {
  projectBuilder.echo("No groupId set.")
}
if (projectBuilder.artifactId == null) {
  projectBuilder.echo("No artifactId set.")
}
if (projectBuilder.version == null) {
  projectBuilder.echo("No version set.")
}

projectBuilder.project.addBuildListener(new ErrorReportingListener(params.buildFile.name))
def codeSource = new GroovyCodeSource(params.buildFile.text, params.buildFile.name, params.buildFile.absoluteFile.getParent())
//def codeSource = new GroovyCodeSource(params.buildFile) // possible charset problem, since systemDefault is used
def compiledScript
// Eval phase
try {
  compiledScript = shell.parse(codeSource)
  compiledScript.run()
  // the script might have mutated or replaced the project binding
  projectBuilder = binding.getVariable("project") as ProjectBuilder
  projectBuilder.execute(params.targets)
} catch (CompilationFailedException e) {
  println "Syntax error in build script ${params.buildFile.canonicalPath}:"
  println "  Message: ${e.message}"
  System.exit(1)
} catch (IOException e) {
  println "Error reading build script: ${e.toString()}"
  System.exit(1)
} catch (BuildException e) {
  System.err.println "Fatal error when executing targets ${params.targets} in ${params.buildFile.canonicalPath}, cannot continue! ${e.message}"
  //e.printStackTrace()
  System.exit(1)
} catch (Exception e) {
  println "Error evaluating build script: ${e.toString()}"
  System.exit(1)
}