#!/usr/bin/env groovy
//@Grab('org.junit.jupiter:junit-jupiter-engine:5.1.12')
//@Grab('org.junit.platform:junit-platform-launcher:1.12.2')
//@Grab('org.junit.platform:junit-platform-commons:1.12.2')
//@Grab('org.opentest4j:opentest4j:1.3.0')
@Grab('org.apache.maven.resolver:maven-resolver-ant-tasks:1.5.3-SNAPSHOT')
@Grab('org.apache.ant:ant-junitlauncher:1.10.15')
@Grab('se.alipsa.uso:uso-tasks:0.0.1')
@GrabConfig(systemClassLoader=true)
import groovy.ant.AntBuilder

binding.groupId = 'se.alipsa.uso'
binding.artifactId = 'uso-core'
binding.version = '0.0.1'
binding.ant = new AntBuilder()
def groovyHome = System.getenv("GROOVY_HOME")

binding.groovyClasspath = new File(groovyHome, "lib").listFiles().findAll { it.name.endsWith(".jar") }

createProjectLayout()

if (args.contains('clean')) {
  clean()
  createProjectLayout()
}
if (args.contains('compile')) {
  compile()
}

if (args.contains('test')) {
  compile()
  compileTest()
  test()
}

if (args.contains('jar')) {
  clean()
  createProjectLayout()
  compile()
  jar()
}

if (args.contains('deployLocal')) {
  clean()
  createProjectLayout()
  compile()
  compileTest()
  test()
  jar()
  createPom()
  deployLocal()
}

if (args.contains('deploy')) {
  deploy()
}

/**
 * Check if a target has already been run.
 * If it has, return true and set the variable to true.
 * If it hasn't, set the variable to false and return false.
 *
 * @param targetName the target name to check
 * @return true if the target has already been run, false otherwise
 */
boolean hasRan(String targetName) {
  boolean result = binding.hasVariable(targetName) && binding.getVariable(targetName)
  binding.setVariable(targetName, true)
  return result
}

def clean() {
  if (hasRan('isCleaned')) return
  println "\n[clean]"
  ant.delete dir: buildDir
  ant.mkdir dir: mainBuildDir
}

def compile() {
  if (hasRan('isCompiled')) return
  println "\n[compile]"
  ant.taskdef(name: 'groovyc', classname: 'org.codehaus.groovy.ant.Groovyc')
  ant.echo "Compiling main groovy classes"
  ant.groovyc(
      srcdir: 'src/main/groovy',
      destdir: mainBuildDir,
      classpath: groovyClasspath
  )
}

def compileTest() {
  if (hasRan('isCompiledTest')) return
  println "\n[compileTest]"
  ant.echo "Compiling test groovy classes"
  ant.groovyc(srcdir: 'src/test/groovy', destdir: testBuildDir) {
    classpath {
      pathelement path: mainBuildDir
      fileset dir: testBuildDir
      groovyClasspath.each { jar ->
        pathelement path: jar
      }
    }
  }
}

def test() {
  if (hasRan('isTested')) return
  println "\n[test]"
  //ant.taskdef(name: 'junit', classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask')
  def outputDir = new File(buildDir, "testoutput")
  if (!outputDir.exists()) {
    outputDir.mkdirs()
  }
  ant.junitlauncher(haltOnFailure: true, printSummary: true) {
    classpath {
      pathelement location: mainBuildDir
      pathelement location: testBuildDir
      groovyClasspath.each { jar ->
        pathelement location: jar
      }
    }
    testclasses(outputdir: outputDir.canonicalPath) {
      fileset dir: testBuildDir
      listener type: "legacy-brief", sendSysOut: true
    }
  }
}

def jar() {
  if (hasRan('isJared')) return
  println "\n[jar]"
  def jarName = "$artifactId-${version}.jar"
  ant.mkdir dir: 'out/jar'
  ant.jar(destfile: "out/jar/$jarName", basedir: mainBuildDir) {
    zipfileset(dir: "src/main/script")
    manifest {
      attribute name: 'Main-Class', value: 'se.alipsa.uso.ProjectBuilder'
    }
  }
  binding.jarName = jarName
}

def createPom() {
  if (hasRan('isCreatedPom')) return
  println "\n[createPom]"
  def pomName = "$artifactId-${version}.pom"
  def pomFile = new File(mainBuildDir, pomName)
  pomFile.text =  """<?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>$groupId</groupId>
    <artifactId>$artifactId</artifactId>
    <version>$version</version>
    <packaging>jar</packaging>
    <name>Uso Core</name>
    <description>Ant based build system for Groovy</description>
    <url>https://github.com/Alipsa/uso</url>
    <licenses>
      <license>
        <name>MIT License</name>
        <url>https://raw.githubusercontent.com/Alipsa/uso/refs/heads/main/LICENSE</url>
      </license>
    </licenses>
    <developers>
      <developer>
        <id>perNyfelt</id>
        <name>Per Nyfelt</name>
      </developer>
    </developers>
    <scm>
      <connection>scm:git:https://github.com/Alipsa/uso.git</connection>
      <developerConnection>scm:git:git@github.com:Alipsa/uso.git</developerConnection>
      <url>https://github.com/Alipsa/uso</url>
    </scm>
    <dependencies>
      <dependency>
        <groupId>org.apache.maven.resolver</groupId>
        <artifactId>maven-resolver-ant-tasks</artifactId>
        <version>1.5.3-SNAPSHOT</version>
      </dependency>
      <dependency>
        <groupId>se.alipsa.uso</groupId>
        <artifactId>uso-tasks</artifactId>
        <version>0.0.1</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.plexus</groupId>
        <artifactId>plexus-xml</artifactId>
        <version>4.0.4</version>
      </dependency>
      <dependency>
        <groupId>org.apache.ant</groupId>
        <artifactId>ant-junitlauncher</artifactId>
        <version>1.10.15</version>
      </dependency>
    </dependencies>
  </project>
  """.stripIndent()
  binding.pomName = pomName
  ant.echo "created $pomFile"
}

def deployLocal() {
  if (hasRan('isDeployedLocal')) return
  println "\n[deployLocal]"
  def m2HomeDir = System.getProperty("M2_HOME") ?: System.getProperty("user.home") + "/.m2"
  def m2Home = new File(m2HomeDir)
  if (!m2Home.exists()) {
    ant.echo "Unable to locate the local maven repository. Please set the M2_HOME environment variable."
    return
  }
  def groupDir = groupId.replace('.', '/')
  def localRepo = new File(m2Home, "repository/$groupDir/$artifactId/$version")
  if (!localRepo.exists()) {
    localRepo.mkdirs()
  }
  ant.copy file: "out/jar/$jarName", toDir: localRepo
  ant.copy file: "out/main/$pomName", toDir: localRepo
  ant.delete dir: "${System.getProperty('user.home')}/.groovy/grapes/se.alipsa.uso"
  ant.echo "Deployed to local maven repository at $localRepo"
}

def signJar() {
  if (hasRan('isSigned')) return
  println "\n[signJar]"
  def jarFile = new File(mainBuildDir, jarName)
  def sigFile = new File(mainBuildDir, "$jarName.asc")
  ant.signjar(jar: jarFile, alias: 'uso', keystore: 'uso.jks', storepass: 'password', sigfile: sigFile)
}

def deploy() {
  //https://stackoverflow.com/questions/61250554/deploying-jar-to-nexus-using-maven-ant-task
  if (hasRan('isDeployed')) return
  ant.taskdef(uri:"antlib:org.apache.maven.resolver.ant", resource:"org/apache/maven/resolver/ant/antlib.xml")
  /*
  <typedef name="authentication"       classname="org.apache.maven.resolver.internal.ant.types.Authentication"/>
  <typedef name="proxy"                classname="org.apache.maven.resolver.internal.ant.types.Proxy"/>
  <typedef name="mirror"               classname="org.apache.maven.resolver.internal.ant.types.Mirror"/>
  <typedef name="localrepo"            classname="org.apache.maven.resolver.internal.ant.types.LocalRepository"/>
  <typedef name="remoterepo"           classname="org.apache.maven.resolver.internal.ant.types.RemoteRepository"/>
  <typedef name="remoterepos"          classname="org.apache.maven.resolver.internal.ant.types.RemoteRepositories"/>
  <typedef name="dependency"           classname="org.apache.maven.resolver.internal.ant.types.Dependency"/>
  <typedef name="dependencies"         classname="org.apache.maven.resolver.internal.ant.types.Dependencies"/>
  <typedef name="artifact"             classname="org.apache.maven.resolver.internal.ant.types.Artifact"/>
  <typedef name="artifacts"            classname="org.apache.maven.resolver.internal.ant.types.Artifacts"/>
  <typedef name="settings"             classname="org.apache.maven.resolver.internal.ant.types.Settings"/>

  <taskdef name="resolve"              classname="org.apache.maven.resolver.internal.ant.tasks.Resolve"/>
  <taskdef name="install"              classname="org.apache.maven.resolver.internal.ant.tasks.Install"/>
  <taskdef name="deploy"               classname="org.apache.maven.resolver.internal.ant.tasks.Deploy"/>
  <taskdef name="pom"                  classname="org.apache.maven.resolver.internal.ant.types.Pom"/>
   */

}

def createProjectLayout() {
  println "\n[createProjectLayout]"

  def buildDir = new File("out")
  if (!buildDir.exists()) {
    buildDir.mkdirs()
  }
  binding.buildDir = buildDir

  def mainBuildDir = new File(buildDir, "main")
  if (!mainBuildDir.exists()) {
    mainBuildDir.mkdirs()
  }
  binding.mainBuildDir = mainBuildDir

  def testBuildDir = new File(buildDir, "testClasses")
  if (!testBuildDir.exists()) {
    testBuildDir.mkdirs()
  }
  binding.testBuildDir = testBuildDir
}